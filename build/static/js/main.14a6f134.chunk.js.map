{"version":3,"sources":["components/Formulario.js","components/Cita.js","App.js","serviceWorker.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","actualizarCita","actualizarState","e","target","name","value","error","actualizarError","className","onSubmit","preventDefault","trim","console","log","id","uuid","type","placeholder","onChange","Cita","eliminarCita","onClick","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","useEffect","setItem","stringify","nuevasCitas","filter","length","titulo","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.14a6f134.chunk.js","sourcesContent":["import React, { Fragment, useState } from 'react'\nimport uuid from 'uuid/v4'\nimport PropTypes from 'prop-types'\n\nfunction Formulario({crearCita}) {\n    //se pasa la funcion del state principal a el formulario\n\n\n\n    //crear state de citas y se ponen como atributos todos los nombres de los imputs, actualizarCita es lo que permite reescribit/escribir en el objeto cita\n    // se usa onCHange en el input una funcion para actualizar el state y se pone como onChange = {laFuncion}\n    const [cita, actualizarCita] = useState({\n        mascota: '',\n        propietario: '',\n        fecha: '',\n        hora: '',\n        sintomas: ''\n    })\n\n    //funcion que se ejecuta cuando el usuario escribe en un input y en \n    //Se le pasa un evento, es decir cada que cambia se le pasa lo que cambia\n    //evento.target.name nos dice como se llama el name del input o .value nos da el valor\n    const actualizarState = e => {\n        actualizarCita({\n            //...estado,\n            ///[para cada nombre del evento de cada evento]: el valor del evento\n            ...cita,\n            [e.target.name]: e.target.value \n            //leemos lo que pone el usuario y lo ponemos en el estado\n        })\n    }\n\n\n    //generamos otro estate para los errores \n    const [error, actualizarError] = useState(false) \n\n    //extraer los valores del state llamado cita para despues formatearlo cuando ya enviemos el formulario\n    const { mascota, propietario, fecha, hora, sintomas} = cita;\n\n    //cuando el usuario presiona agregar vita\n    const submitCita = e => {\n        e.preventDefault(); //porque por defecto lo manda en la url por metodo GET, para evitar eso\n        //aqui van las acciones cuando enviamos citas\n\n        //validamos antes de enviarlo a la base de datos.\n        //trim() elimina los espacios vacios al inicio o final\n        if(mascota.trim() === '' || propietario === '' || fecha === '' || hora === '' || sintomas === ''){\n            //se tiene que retornar algo para evitar que siga la ejecucion\n            console.log('Hay un error, tienes que agregar todos los ddatos');\n            actualizarError(true) // si hay un error, ahora el state Error es true\n            return; \n        }\n\n        //eliminar el mensaje previo de error para evitar que aparezca en el form\n        actualizarError(false)\n\n        //asignamos un ID si pasamos la validacion anterior\n        //instalamos una libreria para que nos haga un id unico llamado uuid y hay otra que se llama shortid\n        cita.id = uuid()\n        console.log(cita);\n\n\n\n        //creamos la cita\n        crearCita(cita)\n\n        //para crear la cita necesitamos un state pricncipal en el app\n        //reiniciamos el form\n        actualizarCita({\n            mascota: '',\n            propietario: '',\n            fecha: '',\n            hora: '',\n            sintomas: ''\n        })\n\n        \n    }\n\n    return (\n        <Fragment>\n            <h2>Crear cita</h2>\n            {error ? <p className='alerta-error'>Todos los campos son obligatorios</p> : null}\n            <form onSubmit={submitCita}>\n                <label>Nombre mascota</label>\n                <input \n                    type = 'text'\n                    name = 'mascota'\n                    className = 'u-full-width'\n                    placeholder = 'nombre de la mascota'\n                    onChange = {actualizarState}\n                    value={mascota}\n                />\n                <label>Nombre del Due単o</label>\n                <input \n                    type = 'text'\n                    name = 'propietario'\n                    className = 'u-full-width'\n                    placeholder = 'nombre del due単o'\n                    onChange = {actualizarState}\n                    value={propietario}\n                />\n                <label>Fecha de la cita</label>\n                <input \n                    type = 'date'\n                    name = 'fecha'\n                    className = 'u-full-width'\n                    onChange = {actualizarState}\n                    value={fecha}\n                />\n                <label>Nombre del Due単o</label>\n                <input \n                    type = 'time'\n                    name = 'hora'\n                    className = 'u-full-width'\n                    onChange = {actualizarState}\n                    value={hora}\n                />\n                <label>Sintomas</label>\n                <textarea \n                    className = 'u-full-width'\n                    name = 'sintomas'\n                    onChange = {actualizarState}\n                    value={sintomas}\n                >\n                </textarea>\n                <button\n                    type='submit'\n                    className = 'u-full-width button-primary'\n                >Agregar cita</button>\n\n            </form>\n        </Fragment>\n    )\n}\n\n\nFormulario.propTypes = {\n    crearCita: PropTypes.func.isRequired\n}\n\nexport default Formulario\n","import React from 'react'\n// import PropTypes from 'prop-types'\n// import PropTypes from 'prop-types'\n\n\nfunction Cita({cita, eliminarCita}) {\n    const {id, mascota, propietario, fecha, hora, sintomas} = cita; \n    return (\n        <div className='cita'>\n            <p>Mascota:<span>{mascota}</span></p>\n            <p>Due単o:<span>{propietario}</span></p>\n            <p>fecha:<span>{fecha}</span></p>\n            <p>hora:<span>{hora}</span></p>\n            <p>sintomas:<span>{sintomas}</span></p>\n\n            <button\n                className='button eliminar u-full-width'\n                onClick={ () => eliminarCita(id)} //la funcion viene desde el app.js, tiene que ser arrowFunction para que no se llame sola\n            >Eliminar &times;</button>\n        </div>\n    )\n}\n\n\n\n// Cita.propTypes = {\n//     cita: PropTypes.object.isRequired,\n//     eliminarCita: propTypes.func.isRequired\n// }\n\nexport default Cita\n","import React,{ Fragment, useState, useEffect } from 'react';\nimport Formulario from './components/Formulario';\nimport Cita from './components/Cita';\n\n\nfunction App() {\n\n  //citas en local Storage, solo almacena strings\n  let citasIniciales = JSON.parse(localStorage.getItem('citas'))\n  if(!citasIniciales){\n    citasIniciales = []\n  }\n  \n  \n  \n  //arreglo de citas\n  const [citas, guardarCitas] = useState(citasIniciales) //se cambia de [] a citasIniciales para cargar lo que esta en local storage\n\n\n  //useEffect se usa para realizar operaciones cuando el state cambia, simepre es un arrowFunction\n    //Se usa cuando el componente esta listo o cuando hay cambios en el componente useEffect( ()=>{}, [state] ) para evitar que se vuelva a ejecutar\n    // o que solo se ejecute una vez, se le pasa un array vacio despues del arrowFunction (se le pasa el state para que este al pendiente de el cambio de 竪ste)\n    //Lo usaremos para guardar citas en el localstorage\n    //se llaman dependencias al arreglo de states dentro del useEffect(arrow, [dependencias])\n\n  useEffect(() => {\n    console.log('Se uso useEffect')\n    if(citasIniciales){\n      localStorage.setItem('citas', JSON.stringify(citas))\n    }else{\n      localStorage.setItem('citas', JSON.stringify([]))\n    }\n  },[citas, citasIniciales])\n  \n  //funcion que tome las citas actuales y tome la nueva\n  const crearCita = cita => {\n    console.log('creando cita') //se pasa al formulario\n    guardarCitas([ ...citas, cita])\n  }\n  \n  const eliminarCita = id =>{\n    console.log('eliminar cita', id);\n    //nuevo arreglo\n    const nuevasCitas = citas.filter(cita => cita.id !== id); //el citas.filter...... es el estado y para quitar el que yo quiero tiene que ser todos los que sean diferentes\n    guardarCitas(nuevasCitas) //porque nuevasCitas ya es un arreglo, y volvemos a modificar el state\n  }\n\n  //mensaje condicional para mostrar un titluo dependiendo si hay o no citas\n  console.log(citas.length)\n  const titulo = citas.length === 0 ? 'No hay citas' : 'Administra tus citas'\n\n  return (\n    <Fragment>\n      <h1>Administrador de pacientes</h1>\n      <div className='container'>\n        <div className='conatainer'>\n          <div className='row'>\n            <div className='one-half column'>\n              <Formulario \n                crearCita={crearCita}\n              />\n            </div>\n            <div className='one-half column'>\n              <h2>{titulo}</h2>\n              {citas.map(cita => (\n                <Cita cita={cita} key={cita.id} eliminarCita={eliminarCita}/>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n\n    </Fragment>\n  );\n}\n\nexport default App;\n\n\n//los propTypes es una forma de mantener documentada los componentes, para el proximo que le de una actualizacion","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}